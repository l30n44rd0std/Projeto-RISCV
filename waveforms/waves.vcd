$date
	Sun Apr  6 22:02:56 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! pc [31:0] $end
$var wire 32 " instr [31:0] $end
$var wire 32 # cycle [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module uut $end
$var wire 1 $ clk $end
$var wire 32 & cycle [31:0] $end
$var wire 1 % reset $end
$var wire 32 ' pc [31:0] $end
$var wire 32 ( instr [31:0] $end
$var reg 32 ) internal_cycle [31:0] $end
$scope module dp $end
$var wire 1 $ clk $end
$var wire 32 * pc [31:0] $end
$var wire 1 % reset $end
$var wire 1 + regWrite $end
$var wire 32 , rd2 [31:0] $end
$var wire 32 - rd1 [31:0] $end
$var wire 1 . memWrite $end
$var wire 1 / memRead $end
$var wire 32 0 memOut [31:0] $end
$var wire 32 1 instr [31:0] $end
$var wire 32 2 imm [31:0] $end
$var wire 1 3 aluSrc $end
$var wire 32 4 aluResult [31:0] $end
$var wire 3 5 aluControl [2:0] $end
$var reg 32 6 pc_reg [31:0] $end
$scope module cu $end
$var wire 7 7 opcode [6:0] $end
$var reg 3 8 aluControl [2:0] $end
$var reg 1 3 aluSrc $end
$var reg 1 / memRead $end
$var reg 1 . memWrite $end
$var reg 1 + regWrite $end
$upscope $end
$scope module dm $end
$var wire 1 $ clk $end
$var wire 1 / memRead $end
$var wire 1 . memWrite $end
$var wire 32 9 rd [31:0] $end
$var wire 32 : wd [31:0] $end
$var wire 32 ; addr [31:0] $end
$upscope $end
$scope module ig $end
$var wire 32 < instr [31:0] $end
$var reg 32 = imm [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 > addr [31:0] $end
$var wire 32 ? instr [31:0] $end
$upscope $end
$scope module myalu $end
$var wire 3 @ aluControl [2:0] $end
$var wire 32 A b [31:0] $end
$var wire 32 B a [31:0] $end
$var reg 32 C result [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 $ clk $end
$var wire 5 D rd [4:0] $end
$var wire 32 E rd1 [31:0] $end
$var wire 32 F rd2 [31:0] $end
$var wire 5 G rs1 [4:0] $end
$var wire 5 H rs2 [4:0] $end
$var wire 32 I wd [31:0] $end
$var wire 1 + we $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx I
b101 H
b0 G
bx F
bx E
b10 D
bx C
bx B
b101 A
b0 @
b10100000000000100010011 ?
b0 >
b101 =
b10100000000000100010011 <
bx ;
bx :
bx 9
b0 8
b10011 7
b0 6
b0 5
bx 4
13
b101 2
b10100000000000100010011 1
bx 0
0/
0.
bx -
bx ,
1+
b0 *
bx )
b10100000000000100010011 (
b0 '
bx &
1%
0$
bx #
b10100000000000100010011 "
b0 !
$end
#5
b1100 A
b11 D
b1100 H
b1100 2
b1100 =
b110000000000000110010011 "
b110000000000000110010011 (
b110000000000000110010011 1
b110000000000000110010011 <
b110000000000000110010011 ?
b100 !
b100 '
b100 *
b100 6
b100 >
b0 #
b0 &
b0 )
1$
#10
0$
#15
b11111111111111111111111111110111 A
b111 D
b10111 H
b11 G
b11111111111111111111111111110111 2
b11111111111111111111111111110111 =
b11111111011100011000001110010011 "
b11111111011100011000001110010011 (
b11111111011100011000001110010011 1
b11111111011100011000001110010011 <
b11111111011100011000001110010011 ?
b1000 !
b1000 '
b1000 *
b1000 6
b1000 >
1$
#20
0$
0%
#25
03
1+
bx A
b100 D
b10 H
b111 G
b110011 7
b0 2
b0 =
b1000111110001000110011 "
b1000111110001000110011 (
b1000111110001000110011 1
b1000111110001000110011 <
b1000111110001000110011 ?
b1100 !
b1100 '
b1100 *
b1100 6
b1100 >
b1 #
b1 &
b1 )
1$
#30
0$
#35
b101 D
b100 H
b11 G
b10000011111001010110011 "
b10000011111001010110011 (
b10000011111001010110011 1
b10000011111001010110011 <
b10000011111001010110011 ?
b10 #
b10 &
b10 )
b10000 !
b10000 '
b10000 *
b10000 6
b10000 >
1$
#40
0$
#45
b101 G
b10000101000001010110011 "
b10000101000001010110011 (
b10000101000001010110011 1
b10000101000001010110011 <
b10000101000001010110011 ?
b10100 !
b10100 '
b10100 *
b10100 6
b10100 >
b11 #
b11 &
b11 )
1$
#50
0$
#55
0+
b10000 D
b111 H
b1100011 7
b10011100101000100001100011 "
b10011100101000100001100011 (
b10011100101000100001100011 1
b10011100101000100001100011 <
b10011100101000100001100011 ?
b100 #
b100 &
b100 )
b11000 !
b11000 '
b11000 *
b11000 6
b11000 >
1$
#60
0$
#65
1+
b100 D
b100 H
b11 G
b110011 7
b10000011010001000110011 "
b10000011010001000110011 (
b10000011010001000110011 1
b10000011010001000110011 <
b10000011010001000110011 ?
b11100 !
b11100 '
b11100 *
b11100 6
b11100 >
b101 #
b101 &
b101 )
1$
#70
0$
#75
0+
b1000 D
b0 H
b100 G
b1100011 7
b100000010001100011 "
b100000010001100011 (
b100000010001100011 1
b100000010001100011 <
b100000010001100011 ?
b110 #
b110 &
b110 )
b100000 !
b100000 '
b100000 *
b100000 6
b100000 >
1$
#80
0$
#85
b0 A
13
1+
b101 D
b0 G
b10011 7
b1010010011 "
b1010010011 (
b1010010011 1
b1010010011 <
b1010010011 ?
b100100 !
b100100 '
b100100 *
b100100 6
b100100 >
b111 #
b111 &
b111 )
1$
#90
0$
#95
bx A
03
1+
b100 D
b10 H
b111 G
b110011 7
b1000111010001000110011 "
b1000111010001000110011 (
b1000111010001000110011 1
b1000111010001000110011 <
b1000111010001000110011 ?
b1000 #
b1000 &
b1000 )
b101000 !
b101000 '
b101000 *
b101000 6
b101000 >
1$
#100
0$
#105
b111 D
b101 H
b100 G
b10100100000001110110011 "
b10100100000001110110011 (
b10100100000001110110011 1
b10100100000001110110011 <
b10100100000001110110011 ?
b101100 !
b101100 '
b101100 *
b101100 6
b101100 >
b1001 #
b1001 &
b1001 )
1$
#110
0$
#115
b10 H
b111 G
b1000000001000111000001110110011 "
b1000000001000111000001110110011 (
b1000000001000111000001110110011 1
b1000000001000111000001110110011 <
b1000000001000111000001110110011 ?
b1010 #
b1010 &
b1010 )
b110000 !
b110000 '
b110000 *
b110000 6
b110000 >
1$
